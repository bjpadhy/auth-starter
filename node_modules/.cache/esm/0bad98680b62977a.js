let isUserActive,userSignup,userSignin,requestOTP,resetPassword;_0b6‍.x([["process",()=>process]]);_0b6‍.w("./controllers/authentication",[["isUserActive",["isUserActive"],function(v){isUserActive=v}],["userSignup",["userSignup"],function(v){userSignup=v}],["userSignin",["userSignin"],function(v){userSignin=v}],["requestOTP",["requestOTP"],function(v){requestOTP=v}],["resetPassword",["resetPassword"],function(v){resetPassword=v}]]);

       const process = async (payload) => {
  try {
    let { operation, data } = payload;
    switch (operation) {
      case "IS_ACTIVE_CHECK":
        return await isUserActive(data);
      case "SIGNUP":
        return await userSignup(data);
      case "SIGNIN":
        return await userSignin(data);
      case "REQUEST_OTP":
        return await requestOTP(data);
      case "RESET_PASSWORD":
        return await resetPassword(data);
      default:
        throw new Error("Operation unavailable! Check payload format.");
    }
  } catch (e) {
    _0b6‍.g.console.error(e);
  }
};
